@page "/FileContentView/{*CurrentPath}"

@using DotNetRu.Commune.GitHubFilesystem
@using Microsoft.Extensions.FileProviders
@using Microsoft.Extensions.Logging
@using System.IO

@inject GitHubFilesystem _gitHubFilesystem;
@inject ILogger<ContentView> logger;

<h3>FileContentView</h3>

@if (string.IsNullOrWhiteSpace(CurrentPath))
{
    <p>Не указан путь к файлу</p>
}
else
{
    <FileContents @ref="fileContentsViewer" FileInfo=@currentFileInfo/>
    <button class="btn-primary" @onclick="AppendButtonClick">Дописать</button>
}

@code {
    [Parameter]
    public string? CurrentPath { get; set; }

    IFileInfo? currentFileInfo;
    FileContents? fileContentsViewer;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if(!string.IsNullOrWhiteSpace(CurrentPath))
            currentFileInfo = await _gitHubFilesystem.GetFileInfoAsync(CurrentPath);
    }

    private async Task AppendButtonClick(MouseEventArgs obj)
    {
        if (currentFileInfo is GithubFile ghfile)
        {
            var stream = await ghfile.CreateReadStreamAsync();
            stream.Position = stream.Length;
            var sw = new StreamWriter(stream){AutoFlush = false};
            await sw.WriteAsync($"\n{Guid.NewGuid()} @ {DateTime.Now}");
            await sw.FlushAsync();
            if(fileContentsViewer != null)
                await fileContentsViewer.RereadFile();
        }
    }


}
