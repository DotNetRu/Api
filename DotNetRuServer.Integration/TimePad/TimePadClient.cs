//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace DotNetRuServer.Integration.TimePad
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TimePadClient 
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public TimePadClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Получить список событий</summary>
        /// <param name="fields">Список полей, которые нужно вывести</param>
        /// <param name="limit">Сколько элементов списка вывести</param>
        /// <param name="skip">С какого элемента списка начать вывод</param>
        /// <param name="sort">Поле, по которому сортировать</param>
        /// <param name="category_ids">Категории, к которым принадлежат события</param>
        /// <param name="category_ids_exclude">Категории, к которым не принадлежат события</param>
        /// <param name="cities">Города, события из которых выводить</param>
        /// <param name="cities_exclude">Города, события из которых не выводить</param>
        /// <param name="organization_ids">Номера организаций, события из которых выводить</param>
        /// <param name="organization_ids_exclude">Номера организаций, события из которых не выводить</param>
        /// <param name="event_ids">Номера событий, которые нужно вывести</param>
        /// <param name="event_ids_exclude">Номера событий, которые нужно пропустить</param>
        /// <param name="keywords">Слова, которые должны быть в названии или описании события</param>
        /// <param name="keywords_exclude">Слова, которых не должно быть в названии или описании события</param>
        /// <param name="access_statuses">Список режимов доступа, в которых находятся события. Возможные значения: private, draft, link_only, public. Доступно только организаторам</param>
        /// <param name="moderation_statuses">Список уровней качества, установленных для события модератором. Возможные значения: featured, shown, hidden, not_moderated.</param>
        /// <param name="price_min">Цена, выше которой должен стоить хотя бы один билет события</param>
        /// <param name="price_max">Цена, ниже которой должен стоить хотя бы один билет события</param>
        /// <param name="ad_partner_percent_min">Хотя бы у одного вида билета события партнёрская комиссия в процентах выше этого значения</param>
        /// <param name="ad_partner_percent_max">Хотя бы у одного вида билета партнёрская комиссия в процентах ниже этого значения</param>
        /// <param name="ad_partner_profit_min">Хотя бы у одного вида билета партнёрская комиссия в рублях выше этого значения</param>
        /// <param name="ad_partner_profit_max">Хотя бы у одного вида билета партнёрская комиссия в рублях ниже этого значения</param>
        /// <param name="starts_at_min">Дата начала события позднее этого значения</param>
        /// <param name="starts_at_max">Дата начала события раньше этого значения</param>
        /// <param name="created_at_min">Дата создания события на Timepad позднее этого значения</param>
        /// <param name="created_at_max">Дата создания события на Timepad раньше этого значения</param>
        /// <returns>Список событий</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventsResponse> GetEventsAsync(System.Collections.Generic.IEnumerable<string> fields, int? limit, int? skip, System.Collections.Generic.IEnumerable<string> sort, System.Collections.Generic.IEnumerable<int> category_ids, System.Collections.Generic.IEnumerable<int> category_ids_exclude, System.Collections.Generic.IEnumerable<string> cities, System.Collections.Generic.IEnumerable<string> cities_exclude, System.Collections.Generic.IEnumerable<int> organization_ids, System.Collections.Generic.IEnumerable<int> organization_ids_exclude, System.Collections.Generic.IEnumerable<int> event_ids, System.Collections.Generic.IEnumerable<int> event_ids_exclude, System.Collections.Generic.IEnumerable<string> keywords, System.Collections.Generic.IEnumerable<string> keywords_exclude, System.Collections.Generic.IEnumerable<string> access_statuses, System.Collections.Generic.IEnumerable<string> moderation_statuses, int? price_min, int? price_max, int? ad_partner_percent_min, int? ad_partner_percent_max, int? ad_partner_profit_min, int? ad_partner_profit_max, System.DateTimeOffset? starts_at_min, System.DateTimeOffset? starts_at_max, System.DateTimeOffset? created_at_min, System.DateTimeOffset? created_at_max)
        {
            return GetEventsAsync(fields, limit, skip, sort, category_ids, category_ids_exclude, cities, cities_exclude, organization_ids, organization_ids_exclude, event_ids, event_ids_exclude, keywords, keywords_exclude, access_statuses, moderation_statuses, price_min, price_max, ad_partner_percent_min, ad_partner_percent_max, ad_partner_profit_min, ad_partner_profit_max, starts_at_min, starts_at_max, created_at_min, created_at_max, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить список событий</summary>
        /// <param name="fields">Список полей, которые нужно вывести</param>
        /// <param name="limit">Сколько элементов списка вывести</param>
        /// <param name="skip">С какого элемента списка начать вывод</param>
        /// <param name="sort">Поле, по которому сортировать</param>
        /// <param name="category_ids">Категории, к которым принадлежат события</param>
        /// <param name="category_ids_exclude">Категории, к которым не принадлежат события</param>
        /// <param name="cities">Города, события из которых выводить</param>
        /// <param name="cities_exclude">Города, события из которых не выводить</param>
        /// <param name="organization_ids">Номера организаций, события из которых выводить</param>
        /// <param name="organization_ids_exclude">Номера организаций, события из которых не выводить</param>
        /// <param name="event_ids">Номера событий, которые нужно вывести</param>
        /// <param name="event_ids_exclude">Номера событий, которые нужно пропустить</param>
        /// <param name="keywords">Слова, которые должны быть в названии или описании события</param>
        /// <param name="keywords_exclude">Слова, которых не должно быть в названии или описании события</param>
        /// <param name="access_statuses">Список режимов доступа, в которых находятся события. Возможные значения: private, draft, link_only, public. Доступно только организаторам</param>
        /// <param name="moderation_statuses">Список уровней качества, установленных для события модератором. Возможные значения: featured, shown, hidden, not_moderated.</param>
        /// <param name="price_min">Цена, выше которой должен стоить хотя бы один билет события</param>
        /// <param name="price_max">Цена, ниже которой должен стоить хотя бы один билет события</param>
        /// <param name="ad_partner_percent_min">Хотя бы у одного вида билета события партнёрская комиссия в процентах выше этого значения</param>
        /// <param name="ad_partner_percent_max">Хотя бы у одного вида билета партнёрская комиссия в процентах ниже этого значения</param>
        /// <param name="ad_partner_profit_min">Хотя бы у одного вида билета партнёрская комиссия в рублях выше этого значения</param>
        /// <param name="ad_partner_profit_max">Хотя бы у одного вида билета партнёрская комиссия в рублях ниже этого значения</param>
        /// <param name="starts_at_min">Дата начала события позднее этого значения</param>
        /// <param name="starts_at_max">Дата начала события раньше этого значения</param>
        /// <param name="created_at_min">Дата создания события на Timepad позднее этого значения</param>
        /// <param name="created_at_max">Дата создания события на Timepad раньше этого значения</param>
        /// <returns>Список событий</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventsResponse> GetEventsAsync(System.Collections.Generic.IEnumerable<string> fields, int? limit, int? skip, System.Collections.Generic.IEnumerable<string> sort, System.Collections.Generic.IEnumerable<int> category_ids, System.Collections.Generic.IEnumerable<int> category_ids_exclude, System.Collections.Generic.IEnumerable<string> cities, System.Collections.Generic.IEnumerable<string> cities_exclude, System.Collections.Generic.IEnumerable<int> organization_ids, System.Collections.Generic.IEnumerable<int> organization_ids_exclude, System.Collections.Generic.IEnumerable<int> event_ids, System.Collections.Generic.IEnumerable<int> event_ids_exclude, System.Collections.Generic.IEnumerable<string> keywords, System.Collections.Generic.IEnumerable<string> keywords_exclude, System.Collections.Generic.IEnumerable<string> access_statuses, System.Collections.Generic.IEnumerable<string> moderation_statuses, int? price_min, int? price_max, int? ad_partner_percent_min, int? ad_partner_percent_max, int? ad_partner_profit_min, int? ad_partner_profit_max, System.DateTimeOffset? starts_at_min, System.DateTimeOffset? starts_at_max, System.DateTimeOffset? created_at_min, System.DateTimeOffset? created_at_max, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events?");
            if (fields != null) 
            {
                foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (category_ids != null) 
            {
                foreach (var item_ in category_ids) { urlBuilder_.Append(System.Uri.EscapeDataString("category_ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (category_ids_exclude != null) 
            {
                foreach (var item_ in category_ids_exclude) { urlBuilder_.Append(System.Uri.EscapeDataString("category_ids_exclude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (cities != null) 
            {
                foreach (var item_ in cities) { urlBuilder_.Append(System.Uri.EscapeDataString("cities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (cities_exclude != null) 
            {
                foreach (var item_ in cities_exclude) { urlBuilder_.Append(System.Uri.EscapeDataString("cities_exclude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (organization_ids != null) 
            {
                foreach (var item_ in organization_ids) { urlBuilder_.Append(System.Uri.EscapeDataString("organization_ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (organization_ids_exclude != null) 
            {
                foreach (var item_ in organization_ids_exclude) { urlBuilder_.Append(System.Uri.EscapeDataString("organization_ids_exclude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (event_ids != null) 
            {
                foreach (var item_ in event_ids) { urlBuilder_.Append(System.Uri.EscapeDataString("event_ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (event_ids_exclude != null) 
            {
                foreach (var item_ in event_ids_exclude) { urlBuilder_.Append(System.Uri.EscapeDataString("event_ids_exclude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (keywords != null) 
            {
                foreach (var item_ in keywords) { urlBuilder_.Append(System.Uri.EscapeDataString("keywords") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (keywords_exclude != null) 
            {
                foreach (var item_ in keywords_exclude) { urlBuilder_.Append(System.Uri.EscapeDataString("keywords_exclude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (access_statuses != null) 
            {
                foreach (var item_ in access_statuses) { urlBuilder_.Append(System.Uri.EscapeDataString("access_statuses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (moderation_statuses != null) 
            {
                foreach (var item_ in moderation_statuses) { urlBuilder_.Append(System.Uri.EscapeDataString("moderation_statuses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (price_min != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("price_min") + "=").Append(System.Uri.EscapeDataString(ConvertToString(price_min, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (price_max != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("price_max") + "=").Append(System.Uri.EscapeDataString(ConvertToString(price_max, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ad_partner_percent_min != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ad_partner_percent_min") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ad_partner_percent_min, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ad_partner_percent_max != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ad_partner_percent_max") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ad_partner_percent_max, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ad_partner_profit_min != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ad_partner_profit_min") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ad_partner_profit_min, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ad_partner_profit_max != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ad_partner_profit_max") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ad_partner_profit_max, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (starts_at_min != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("starts_at_min") + "=").Append(System.Uri.EscapeDataString(starts_at_min.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (starts_at_max != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("starts_at_max") + "=").Append(System.Uri.EscapeDataString(starts_at_max.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (created_at_min != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("created_at_min") + "=").Append(System.Uri.EscapeDataString(created_at_min.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (created_at_max != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("created_at_max") + "=").Append(System.Uri.EscapeDataString(created_at_max.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(EventsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Создать событие</summary>
        /// <param name="body">Описание создаваемого события</param>
        /// <returns>Созданное событие</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventResponse> AddEventAsync(CreateEvent body)
        {
            return AddEventAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Создать событие</summary>
        /// <param name="body">Описание создаваемого события</param>
        /// <returns>Созданное событие</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventResponse> AddEventAsync(CreateEvent body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(EventResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить событие по ID</summary>
        /// <param name="fields">Список полей, которые нужно вывести</param>
        /// <param name="event_id">Номер события, которые нужно вывести</param>
        /// <returns>Запрашиваемое событие</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventResponse> GetSingleEventAsync(System.Collections.Generic.IEnumerable<string> fields, int event_id)
        {
            return GetSingleEventAsync(fields, event_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить событие по ID</summary>
        /// <param name="fields">Список полей, которые нужно вывести</param>
        /// <param name="event_id">Номер события, которые нужно вывести</param>
        /// <returns>Запрашиваемое событие</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventResponse> GetSingleEventAsync(System.Collections.Generic.IEnumerable<string> fields, int event_id, System.Threading.CancellationToken cancellationToken)
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events/{event_id}?");
            urlBuilder_.Replace("{event_id}", System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null) 
            {
                foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(EventResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Изменить событие</summary>
        /// <param name="event_id">Номер редактируемого события</param>
        /// <param name="body">Список изменённых параметров события</param>
        /// <returns>Отредактированное событие</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventResponse> EditEventAsync(int event_id, EditEvent body)
        {
            return EditEventAsync(event_id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Изменить событие</summary>
        /// <param name="event_id">Номер редактируемого события</param>
        /// <param name="body">Список изменённых параметров события</param>
        /// <returns>Отредактированное событие</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventResponse> EditEventAsync(int event_id, EditEvent body, System.Threading.CancellationToken cancellationToken)
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events/{event_id}");
            urlBuilder_.Replace("{event_id}", System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(EventResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить заказы события</summary>
        /// <param name="limit">Сколько элементов списка вывести</param>
        /// <param name="skip">С какого элемента списка начать вывод</param>
        /// <param name="email">email пользователя</param>
        /// <param name="fields">Список полей, которые нужно вывести</param>
        /// <param name="event_id">Номер события, к которому относятся заказы</param>
        /// <returns>Список заказов</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RegistrationOrdersResponse> GetEventOrdersAsync(int? limit, int? skip, string email, System.Collections.Generic.IEnumerable<string> fields, int event_id)
        {
            return GetEventOrdersAsync(limit, skip, email, fields, event_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить заказы события</summary>
        /// <param name="limit">Сколько элементов списка вывести</param>
        /// <param name="skip">С какого элемента списка начать вывод</param>
        /// <param name="email">email пользователя</param>
        /// <param name="fields">Список полей, которые нужно вывести</param>
        /// <param name="event_id">Номер события, к которому относятся заказы</param>
        /// <returns>Список заказов</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RegistrationOrdersResponse> GetEventOrdersAsync(int? limit, int? skip, string email, System.Collections.Generic.IEnumerable<string> fields, int event_id, System.Threading.CancellationToken cancellationToken)
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events/{event_id}/orders?");
            urlBuilder_.Replace("{event_id}", System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (email != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fields != null) 
            {
                foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RegistrationOrdersResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RegistrationOrdersResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Создать заказ (deprecated)</summary>
        /// <param name="event_id">Номер события</param>
        /// <param name="body">Описание создаваемого заказа</param>
        /// <returns>Созданный заказ</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<RegistrationOrderResponse> AddOrderAsync(int event_id, CreateOrder body)
        {
            return AddOrderAsync(event_id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Создать заказ (deprecated)</summary>
        /// <param name="event_id">Номер события</param>
        /// <param name="body">Описание создаваемого заказа</param>
        /// <returns>Созданный заказ</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<RegistrationOrderResponse> AddOrderAsync(int event_id, CreateOrder body, System.Threading.CancellationToken cancellationToken)
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events/{event_id}/orders");
            urlBuilder_.Replace("{event_id}", System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RegistrationOrderResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RegistrationOrderResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить заказ по ID</summary>
        /// <param name="fields">Список полей, которые нужно вывести</param>
        /// <param name="event_id">Номер события, к которому относится заказ</param>
        /// <param name="order_id">Номер заказа</param>
        /// <returns>Запрашиваемый заказ</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RegistrationOrderResponse> GetSingleEventOrderAsync(System.Collections.Generic.IEnumerable<string> fields, int event_id, int order_id)
        {
            return GetSingleEventOrderAsync(fields, event_id, order_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить заказ по ID</summary>
        /// <param name="fields">Список полей, которые нужно вывести</param>
        /// <param name="event_id">Номер события, к которому относится заказ</param>
        /// <param name="order_id">Номер заказа</param>
        /// <returns>Запрашиваемый заказ</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RegistrationOrderResponse> GetSingleEventOrderAsync(System.Collections.Generic.IEnumerable<string> fields, int event_id, int order_id, System.Threading.CancellationToken cancellationToken)
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");
    
            if (order_id == null)
                throw new System.ArgumentNullException("order_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events/{event_id}/orders/{order_id}?");
            urlBuilder_.Replace("{event_id}", System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(order_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null) 
            {
                foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RegistrationOrderResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RegistrationOrderResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Изменить заказ</summary>
        /// <param name="event_id">Номер события, к которому относится заказ</param>
        /// <param name="order_id">Номер заказа</param>
        /// <param name="body">Список изменённых параметров заказа</param>
        /// <returns>Редактируемый заказ</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RegistrationOrderResponse> EditEventOrderAsync(int event_id, int order_id, EditOrder body)
        {
            return EditEventOrderAsync(event_id, order_id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Изменить заказ</summary>
        /// <param name="event_id">Номер события, к которому относится заказ</param>
        /// <param name="order_id">Номер заказа</param>
        /// <param name="body">Список изменённых параметров заказа</param>
        /// <returns>Редактируемый заказ</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RegistrationOrderResponse> EditEventOrderAsync(int event_id, int order_id, EditOrder body, System.Threading.CancellationToken cancellationToken)
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");
    
            if (order_id == null)
                throw new System.ArgumentNullException("order_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events/{event_id}/orders/{order_id}");
            urlBuilder_.Replace("{event_id}", System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(order_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RegistrationOrderResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RegistrationOrderResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Подтвердить заказ</summary>
        /// <param name="event_id">Номер события, к которому относится заказ</param>
        /// <param name="order_id">Номер заказа</param>
        /// <returns>Редактируемый заказ</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RegistrationOrderResponse> ApproveEventOrderAsync(int event_id, int order_id)
        {
            return ApproveEventOrderAsync(event_id, order_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Подтвердить заказ</summary>
        /// <param name="event_id">Номер события, к которому относится заказ</param>
        /// <param name="order_id">Номер заказа</param>
        /// <returns>Редактируемый заказ</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RegistrationOrderResponse> ApproveEventOrderAsync(int event_id, int order_id, System.Threading.CancellationToken cancellationToken)
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");
    
            if (order_id == null)
                throw new System.ArgumentNullException("order_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events/{event_id}/orders/{order_id}/approve");
            urlBuilder_.Replace("{event_id}", System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(order_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RegistrationOrderResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RegistrationOrderResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Отклонить заказ</summary>
        /// <param name="event_id">Номер события, к которому относится заказ</param>
        /// <param name="order_id">Номер заказа</param>
        /// <returns>Редактируемый заказ</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RegistrationOrderResponse> RejectEventOrderAsync(int event_id, int order_id)
        {
            return RejectEventOrderAsync(event_id, order_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Отклонить заказ</summary>
        /// <param name="event_id">Номер события, к которому относится заказ</param>
        /// <param name="order_id">Номер заказа</param>
        /// <returns>Редактируемый заказ</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RegistrationOrderResponse> RejectEventOrderAsync(int event_id, int order_id, System.Threading.CancellationToken cancellationToken)
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");
    
            if (order_id == null)
                throw new System.ArgumentNullException("order_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events/{event_id}/orders/{order_id}/reject");
            urlBuilder_.Replace("{event_id}", System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(order_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RegistrationOrderResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RegistrationOrderResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Удалить заказ</summary>
        /// <param name="event_id">Номер события, к которому относится заказ</param>
        /// <param name="order_id">Номер заказа</param>
        /// <returns>Редактируемый заказ</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RegistrationOrderResponse> DeleteEventOrderAsync(int event_id, int order_id)
        {
            return DeleteEventOrderAsync(event_id, order_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Удалить заказ</summary>
        /// <param name="event_id">Номер события, к которому относится заказ</param>
        /// <param name="order_id">Номер заказа</param>
        /// <returns>Редактируемый заказ</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RegistrationOrderResponse> DeleteEventOrderAsync(int event_id, int order_id, System.Threading.CancellationToken cancellationToken)
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");
    
            if (order_id == null)
                throw new System.ArgumentNullException("order_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events/{event_id}/orders/{order_id}/delete");
            urlBuilder_.Replace("{event_id}", System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(order_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RegistrationOrderResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RegistrationOrderResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Создать организацию</summary>
        /// <param name="body">Описание созданной организации</param>
        /// <returns>Созданная организация</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrganizationResponse> AddOrganizationAsync(CreateOrganization body)
        {
            return AddOrganizationAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Создать организацию</summary>
        /// <param name="body">Описание созданной организации</param>
        /// <returns>Созданная организация</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OrganizationResponse> AddOrganizationAsync(CreateOrganization body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/organizations");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrganizationResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OrganizationResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить список webhook'ов</summary>
        /// <param name="organization_id">Идентификатор организации</param>
        /// <param name="type">Тип получаемых webhook'ов</param>
        /// <returns>Список webhook'ов</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WebhooksApiResponse> GetHooksAsync(int organization_id, string type)
        {
            return GetHooksAsync(organization_id, type, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить список webhook'ов</summary>
        /// <param name="organization_id">Идентификатор организации</param>
        /// <param name="type">Тип получаемых webhook'ов</param>
        /// <returns>Список webhook'ов</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WebhooksApiResponse> GetHooksAsync(int organization_id, string type, System.Threading.CancellationToken cancellationToken)
        {
            if (organization_id == null)
                throw new System.ArgumentNullException("organization_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/organizations/{organization_id}/hooks?");
            urlBuilder_.Replace("{organization_id}", System.Uri.EscapeDataString(ConvertToString(organization_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (type != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WebhooksApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(WebhooksApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Создать webhook для организации</summary>
        /// <param name="organization_id">Идентификатор организации</param>
        /// <param name="body">Описание добавляемого webhook'а</param>
        /// <returns>Отредактированный webhook</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WebhooksApiResponse> AddHookAsync(int organization_id, CreateHook body)
        {
            return AddHookAsync(organization_id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Создать webhook для организации</summary>
        /// <param name="organization_id">Идентификатор организации</param>
        /// <param name="body">Описание добавляемого webhook'а</param>
        /// <returns>Отредактированный webhook</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WebhooksApiResponse> AddHookAsync(int organization_id, CreateHook body, System.Threading.CancellationToken cancellationToken)
        {
            if (organization_id == null)
                throw new System.ArgumentNullException("organization_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/organizations/{organization_id}/hooks");
            urlBuilder_.Replace("{organization_id}", System.Uri.EscapeDataString(ConvertToString(organization_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WebhooksApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(WebhooksApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить webhook по ID</summary>
        /// <param name="organization_id">Идентификатор организации</param>
        /// <param name="hook_id">Идентификатор webhook'а</param>
        /// <returns>Возвращает объект webhook'а</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WebhookApiResponse> GetHookAsync(int organization_id, int hook_id)
        {
            return GetHookAsync(organization_id, hook_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить webhook по ID</summary>
        /// <param name="organization_id">Идентификатор организации</param>
        /// <param name="hook_id">Идентификатор webhook'а</param>
        /// <returns>Возвращает объект webhook'а</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WebhookApiResponse> GetHookAsync(int organization_id, int hook_id, System.Threading.CancellationToken cancellationToken)
        {
            if (organization_id == null)
                throw new System.ArgumentNullException("organization_id");
    
            if (hook_id == null)
                throw new System.ArgumentNullException("hook_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/organizations/{organization_id}/hooks/{hook_id}");
            urlBuilder_.Replace("{organization_id}", System.Uri.EscapeDataString(ConvertToString(organization_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hook_id}", System.Uri.EscapeDataString(ConvertToString(hook_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WebhookApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(WebhookApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Изменить webhook</summary>
        /// <param name="organization_id">Идентификатор организации</param>
        /// <param name="hook_id">Идентификатор webhook'а</param>
        /// <param name="body">Поля для обновления webhook'а</param>
        /// <returns>Отредактированный webhook</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WebhookApiResponse> EditHookAsync(int organization_id, int hook_id, EditHook body)
        {
            return EditHookAsync(organization_id, hook_id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Изменить webhook</summary>
        /// <param name="organization_id">Идентификатор организации</param>
        /// <param name="hook_id">Идентификатор webhook'а</param>
        /// <param name="body">Поля для обновления webhook'а</param>
        /// <returns>Отредактированный webhook</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WebhookApiResponse> EditHookAsync(int organization_id, int hook_id, EditHook body, System.Threading.CancellationToken cancellationToken)
        {
            if (organization_id == null)
                throw new System.ArgumentNullException("organization_id");
    
            if (hook_id == null)
                throw new System.ArgumentNullException("hook_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/organizations/{organization_id}/hooks/{hook_id}");
            urlBuilder_.Replace("{organization_id}", System.Uri.EscapeDataString(ConvertToString(organization_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hook_id}", System.Uri.EscapeDataString(ConvertToString(hook_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WebhookApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(WebhookApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить список реквизитов компаний</summary>
        /// <param name="event_id">Номер события</param>
        /// <param name="limit">Сколько элементов списка вывести</param>
        /// <param name="skip">С какого элемента списка начать вывод</param>
        /// <returns>Список реквизитов</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CompaniesResponse> EventCompaniesListAsync(int event_id, int? limit, int? skip)
        {
            return EventCompaniesListAsync(event_id, limit, skip, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить список реквизитов компаний</summary>
        /// <param name="event_id">Номер события</param>
        /// <param name="limit">Сколько элементов списка вывести</param>
        /// <param name="skip">С какого элемента списка начать вывод</param>
        /// <returns>Список реквизитов</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CompaniesResponse> EventCompaniesListAsync(int event_id, int? limit, int? skip, System.Threading.CancellationToken cancellationToken)
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events/{event_id}/companies?");
            urlBuilder_.Replace("{event_id}", System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompaniesResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CompaniesResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить реквизиты юрлица по ID</summary>
        /// <param name="event_id">Номер события</param>
        /// <param name="company_id">Номер реквизитов</param>
        /// <returns>Реквизиты юрлица</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CompanyResponse> EventCompanyAsync(int event_id, int company_id)
        {
            return EventCompanyAsync(event_id, company_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить реквизиты юрлица по ID</summary>
        /// <param name="event_id">Номер события</param>
        /// <param name="company_id">Номер реквизитов</param>
        /// <returns>Реквизиты юрлица</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CompanyResponse> EventCompanyAsync(int event_id, int company_id, System.Threading.CancellationToken cancellationToken)
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");
    
            if (company_id == null)
                throw new System.ArgumentNullException("company_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events/{event_id}/companies/{company_id}");
            urlBuilder_.Replace("{event_id}", System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{company_id}", System.Uri.EscapeDataString(ConvertToString(company_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CompanyResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить запросы на оплату от юрлица</summary>
        /// <param name="event_id">Номер события</param>
        /// <param name="limit">Сколько элементов списка вывести</param>
        /// <param name="skip">С какого элемента списка начать вывод</param>
        /// <returns>Список запросов</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CompanyPaymentRequestsResponse> EventCompanyPaymentsAsync(int event_id, int? limit, int? skip)
        {
            return EventCompanyPaymentsAsync(event_id, limit, skip, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить запросы на оплату от юрлица</summary>
        /// <param name="event_id">Номер события</param>
        /// <param name="limit">Сколько элементов списка вывести</param>
        /// <param name="skip">С какого элемента списка начать вывод</param>
        /// <returns>Список запросов</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CompanyPaymentRequestsResponse> EventCompanyPaymentsAsync(int event_id, int? limit, int? skip, System.Threading.CancellationToken cancellationToken)
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events/{event_id}/company_payment_requests?");
            urlBuilder_.Replace("{event_id}", System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyPaymentRequestsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CompanyPaymentRequestsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить запросы на оплату от юрлица по ID</summary>
        /// <param name="event_id">Номер события</param>
        /// <param name="company_payment_request_id">Номер реквизитов компании</param>
        /// <returns>Список запросов</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CompanyPaymentRequestResponse> EventCompanyPayments2Async(int event_id, int company_payment_request_id)
        {
            return EventCompanyPayments2Async(event_id, company_payment_request_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить запросы на оплату от юрлица по ID</summary>
        /// <param name="event_id">Номер события</param>
        /// <param name="company_payment_request_id">Номер реквизитов компании</param>
        /// <returns>Список запросов</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CompanyPaymentRequestResponse> EventCompanyPayments2Async(int event_id, int company_payment_request_id, System.Threading.CancellationToken cancellationToken)
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");
    
            if (company_payment_request_id == null)
                throw new System.ArgumentNullException("company_payment_request_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events/{event_id}/company_payment_requests/{company_payment_request_id}");
            urlBuilder_.Replace("{event_id}", System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{company_payment_request_id}", System.Uri.EscapeDataString(ConvertToString(company_payment_request_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyPaymentRequestResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CompanyPaymentRequestResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить выставленные счета</summary>
        /// <param name="event_id">Номер события</param>
        /// <param name="limit">Сколько элементов списка вывести</param>
        /// <param name="skip">С какого элемента списка начать вывод</param>
        /// <returns>Список счетов</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<InvoicesResponse> EventCompanyPayments3Async(int event_id, int? limit, int? skip)
        {
            return EventCompanyPayments3Async(event_id, limit, skip, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить выставленные счета</summary>
        /// <param name="event_id">Номер события</param>
        /// <param name="limit">Сколько элементов списка вывести</param>
        /// <param name="skip">С какого элемента списка начать вывод</param>
        /// <returns>Список счетов</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<InvoicesResponse> EventCompanyPayments3Async(int event_id, int? limit, int? skip, System.Threading.CancellationToken cancellationToken)
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events/{event_id}/invoices?");
            urlBuilder_.Replace("{event_id}", System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InvoicesResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(InvoicesResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить счет по ID</summary>
        /// <param name="event_id">Номер события</param>
        /// <param name="invoice_id">Номер счета</param>
        /// <returns>Ответ с данными счета</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<InvoiceResponse> EventCompanyPayments4Async(int event_id, int invoice_id)
        {
            return EventCompanyPayments4Async(event_id, invoice_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить счет по ID</summary>
        /// <param name="event_id">Номер события</param>
        /// <param name="invoice_id">Номер счета</param>
        /// <returns>Ответ с данными счета</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<InvoiceResponse> EventCompanyPayments4Async(int event_id, int invoice_id, System.Threading.CancellationToken cancellationToken)
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");
    
            if (invoice_id == null)
                throw new System.ArgumentNullException("invoice_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/events/{event_id}/invoices/{invoice_id}");
            urlBuilder_.Replace("{event_id}", System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{invoice_id}", System.Uri.EscapeDataString(ConvertToString(invoice_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InvoiceResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(InvoiceResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Вызвать кастомный метод</summary>
        /// <param name="organization_id">Идентификатор организации</param>
        /// <param name="method_name">Название кастомного метода</param>
        /// <param name="body">Дополнительные параметры, передаваемые методу</param>
        /// <returns>Ответ кастомного метода и статус выполнения</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CustomMethodApiResponse> CallCustomMethodAsync(int organization_id, string method_name, CallCustomMethod body)
        {
            return CallCustomMethodAsync(organization_id, method_name, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Вызвать кастомный метод</summary>
        /// <param name="organization_id">Идентификатор организации</param>
        /// <param name="method_name">Название кастомного метода</param>
        /// <param name="body">Дополнительные параметры, передаваемые методу</param>
        /// <returns>Ответ кастомного метода и статус выполнения</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CustomMethodApiResponse> CallCustomMethodAsync(int organization_id, string method_name, CallCustomMethod body, System.Threading.CancellationToken cancellationToken)
        {
            if (organization_id == null)
                throw new System.ArgumentNullException("organization_id");
    
            if (method_name == null)
                throw new System.ArgumentNullException("method_name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/organizations/{organization_id}/custom_method/{method_name}");
            urlBuilder_.Replace("{organization_id}", System.Uri.EscapeDataString(ConvertToString(organization_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{method_name}", System.Uri.EscapeDataString(ConvertToString(method_name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomMethodApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CustomMethodApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить список категорий событий</summary>
        /// <returns>Список категорий событий</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventsCategoriesApiResponse> GetEventsCategoriesAsync()
        {
            return GetEventsCategoriesAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить список категорий событий</summary>
        /// <returns>Список категорий событий</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventsCategoriesApiResponse> GetEventsCategoriesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/dictionary/event_categories");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventsCategoriesApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(EventsCategoriesApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить список статусов событий</summary>
        /// <returns>Список статусов событий</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventsStatusesApiResponse> GetEventsStatusesAsync()
        {
            return GetEventsStatusesAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить список статусов событий</summary>
        /// <returns>Список статусов событий</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventsStatusesApiResponse> GetEventsStatusesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/dictionary/event_statuses");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventsStatusesApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(EventsStatusesApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить список статусов билетов</summary>
        /// <returns>Список статусов билетов</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TicketsStatusesApiResponse> GetTicketsStatusesAsync()
        {
            return GetTicketsStatusesAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить список статусов билетов</summary>
        /// <returns>Список статусов билетов</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TicketsStatusesApiResponse> GetTicketsStatusesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/dictionary/tickets_statuses");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TicketsStatusesApiResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TicketsStatusesApiResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить токен для работы с API</summary>
        /// <param name="client_id">Идентификатор клиента</param>
        /// <param name="redirect_uri">Ссылка на которую произойдёт редирект</param>
        /// <param name="response_type">Возвращаемый тип ответа. Единственное поддерживаемое значение - token</param>
        /// <param name="scope">Запрашиваемые приложением разрешения через запятую. Возможные значения: add_events, add_organizations, edit_events, view_private_events, view_visitors, edit_visitors, add_cash_payments, edit_organizations_hooks</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AuthorizeAsync(string client_id, string redirect_uri, string response_type, System.Collections.Generic.IEnumerable<string> scope)
        {
            return AuthorizeAsync(client_id, redirect_uri, response_type, scope, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить токен для работы с API</summary>
        /// <param name="client_id">Идентификатор клиента</param>
        /// <param name="redirect_uri">Ссылка на которую произойдёт редирект</param>
        /// <param name="response_type">Возвращаемый тип ответа. Единственное поддерживаемое значение - token</param>
        /// <param name="scope">Запрашиваемые приложением разрешения через запятую. Возможные значения: add_events, add_organizations, edit_events, view_private_events, view_visitors, edit_visitors, add_cash_payments, edit_organizations_hooks</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AuthorizeAsync(string client_id, string redirect_uri, string response_type, System.Collections.Generic.IEnumerable<string> scope, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("oauth/authorize?");
            if (client_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("client_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (redirect_uri != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("redirect_uri") + "=").Append(System.Uri.EscapeDataString(ConvertToString(redirect_uri, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (response_type != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("response_type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(response_type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (scope != null) 
            {
                foreach (var item_ in scope) { urlBuilder_.Append(System.Uri.EscapeDataString("scope") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "302") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("\u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u0444\u043e\u0440\u043c\u0443 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить информацию о пользователе API</summary>
        /// <param name="token">Идентификатор токена</param>
        /// <returns>Информация о пользователе API</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Introspect> IntrospectTokenAsync(string token)
        {
            return IntrospectTokenAsync(token, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить информацию о пользователе API</summary>
        /// <param name="token">Идентификатор токена</param>
        /// <returns>Информация о пользователе API</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Introspect> IntrospectTokenAsync(string token, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("introspect?");
            if (token != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Introspect>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Introspect);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Получить информацию о пользователе API</summary>
        /// <param name="token">Идентификатор токена</param>
        /// <returns>Информация о пользователе API</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Introspect> IntrospectTokenPostAsync(string token)
        {
            return IntrospectTokenPostAsync(token, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Получить информацию о пользователе API</summary>
        /// <param name="token">Идентификатор токена</param>
        /// <returns>Информация о пользователе API</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Introspect> IntrospectTokenPostAsync(string token, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("introspect");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (token != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture)), "token");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Introspect>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Introspect);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TicketTypeRequest 
    {
        /// <summary>Номер существующего типа билета</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>Цена существующего типа билета</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Price { get; set; }
    
        /// <summary>Статус типа билета</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Название типа билета</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Описание типа билета</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Дата начала продажи типа билета</summary>
        [Newtonsoft.Json.JsonProperty("sale_starts_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Sale_starts_at { get; set; }
    
        /// <summary>Дата окончания продажи типа билета</summary>
        [Newtonsoft.Json.JsonProperty("sale_ends_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Sale_ends_at { get; set; }
    
        /// <summary>Категория билетов с отправкой персональных ссылок</summary>
        [Newtonsoft.Json.JsonProperty("send_personal_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Send_personal_links { get; set; }
    
        /// <summary>Ограничение на количество билетов этого типа</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Limit { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeleteOrder 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateHook 
    {
        /// <summary>URL-адресс для колбека при событии</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }
    
        /// <summary>Секретная фраза для подписки webhook'ов</summary>
        [Newtonsoft.Json.JsonProperty("secret", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Secret { get; set; }
    
        /// <summary>Тип webhook'а</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateOrganization 
    {
        /// <summary>Название организации</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>URL-идентификатор организации в Таймпаде (***.timepad.ru)</summary>
        [Newtonsoft.Json.JsonProperty("subdomain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subdomain { get; set; }
    
        /// <summary>Телефон организатора</summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Phone { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LocationInclude 
    {
        /// <summary>Город проведения события</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>Адрес проведения события</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EditOrderStatusAbstract 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EditOrderPayment 
    {
        /// <summary>Дата оплаты заказа</summary>
        [Newtonsoft.Json.JsonProperty("paid_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Paid_at { get; set; }
    
        /// <summary>Сумма заказа</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }
    
        /// <summary>Тип платежа</summary>
        [Newtonsoft.Json.JsonProperty("payment_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_type { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CallCustomMethod 
    {
        /// <summary>Аргументы, которые нужно передать вызываемому методу</summary>
        [Newtonsoft.Json.JsonProperty("args", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Args { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrganizationInclude 
    {
        /// <summary>Номер организации в Таймпаде</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>URL-идентификатор организации в Таймпаде (***.timepad.ru)</summary>
        [Newtonsoft.Json.JsonProperty("subdomain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subdomain { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EditHook 
    {
        /// <summary>URL-адресс для колбека при событии</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        /// <summary>Секретная фраза для подписки webhook'ов</summary>
        [Newtonsoft.Json.JsonProperty("secret", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Secret { get; set; }
    
        /// <summary>Статус webhook'а</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TicketInclude 
    {
        /// <summary>Ответы на анкету регистрации</summary>
        [Newtonsoft.Json.JsonProperty("answers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Answers { get; set; }
    
        /// <summary>Номер типа билета</summary>
        [Newtonsoft.Json.JsonProperty("ticket_type_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ticket_type_id { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CategoryInclude 
    {
        /// <summary>Номер категории в Таймпаде</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>Название категории в Таймпаде</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EditOrder 
    {
        /// <summary>Список видов билетов</summary>
        [Newtonsoft.Json.JsonProperty("visitors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EditOrderVisitors> Visitors { get; set; }
    
        /// <summary>Ответы на анкету регистрации</summary>
        [Newtonsoft.Json.JsonProperty("answers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Answers { get; set; }
    
        /// <summary>Платёж</summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EditOrderPayment Payment { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RejectOrder 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EditOrderAttendance 
    {
        /// <summary>Дата посещения события</summary>
        [Newtonsoft.Json.JsonProperty("starts_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Starts_at { get; set; }
    
        /// <summary>Дата ухода с события</summary>
        [Newtonsoft.Json.JsonProperty("ends_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Ends_at { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateOrder 
    {
        /// <summary>Список видов билетов</summary>
        [Newtonsoft.Json.JsonProperty("tickets", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TicketInclude> Tickets { get; set; } = new System.Collections.ObjectModel.Collection<TicketInclude>();
    
        /// <summary>Список видов билетов</summary>
        [Newtonsoft.Json.JsonProperty("answers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Answers { get; set; } = new System.Collections.Generic.Dictionary<string, string>();
    
        /// <summary>Промокоды</summary>
        [Newtonsoft.Json.JsonProperty("promocodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Promocodes { get; set; }
    
        /// <summary>Подписка на анонсы событий организатора</summary>
        [Newtonsoft.Json.JsonProperty("subscribed_to_newsletter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Subscribed_to_newsletter { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EditOrderVisitors 
    {
        /// <summary>Номер регистрации</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        /// <summary>Ответы на анкету регистрации</summary>
        [Newtonsoft.Json.JsonProperty("answers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Answers { get; set; }
    
        /// <summary>Посещение события</summary>
        [Newtonsoft.Json.JsonProperty("attendance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EditOrderAttendance Attendance { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateEvent 
    {
        /// <summary>Организация, проводящая событие</summary>
        [Newtonsoft.Json.JsonProperty("organization", Required = Newtonsoft.Json.Required.Always)]
        public OrganizationInclude Organization { get; set; }
    
        /// <summary>Дата начала события</summary>
        [Newtonsoft.Json.JsonProperty("starts_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Starts_at { get; set; }
    
        /// <summary>Дата окончания события</summary>
        [Newtonsoft.Json.JsonProperty("ends_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Ends_at { get; set; }
    
        /// <summary>Название события</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>Краткое описание/подзаголовок события</summary>
        [Newtonsoft.Json.JsonProperty("description_short", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description_short { get; set; }
    
        /// <summary>Полное описание с html-тегами</summary>
        [Newtonsoft.Json.JsonProperty("description_html", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description_html { get; set; }
    
        /// <summary>Список категорий, в которые входит событие</summary>
        [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CategoryInclude> Categories { get; set; } = new System.Collections.ObjectModel.Collection<CategoryInclude>();
    
        /// <summary>Место проведения события</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationInclude Location { get; set; }
    
        /// <summary>URL картинки события</summary>
        [Newtonsoft.Json.JsonProperty("poster_image_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Poster_image_url { get; set; }
    
        /// <summary>Список настроек события (например, мультианкета)</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Properties { get; set; }
    
        /// <summary>Объект с дополнительными полями, специфичными для данной организации</summary>
        [Newtonsoft.Json.JsonProperty("custom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Custom { get; set; }
    
        /// <summary>Список вопросов в анкете регистрации</summary>
        [Newtonsoft.Json.JsonProperty("questions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QuestionInclude> Questions { get; set; }
    
        /// <summary>Статус доступа к событию</summary>
        [Newtonsoft.Json.JsonProperty("access_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Access_status { get; set; }
    
        /// <summary>Возрастное ограничение события</summary>
        [Newtonsoft.Json.JsonProperty("age_limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Age_limit { get; set; }
    
        /// <summary>Максимальное количество человек, которые могут посетить событие. При достижении этого количества регистрация на событие закроется, даже если будут открытыми категории регистрации. Поставьте 0, чтобы снять ограничение. Учитывается количество как оплаченных, так и забронированных билетов.</summary>
        [Newtonsoft.Json.JsonProperty("tickets_limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Tickets_limit { get; set; }
    
        /// <summary>Список видов билетов</summary>
        [Newtonsoft.Json.JsonProperty("ticket_types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TicketTypeRequest> Ticket_types { get; set; }
    
        /// <summary>Список персональных ссылок для билетов</summary>
        [Newtonsoft.Json.JsonProperty("personal_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Personal_links { get; set; }
    
        /// <summary>Заголовок персональной ссылки (Например: Ваша ссылка на онлайн-трансляцию)</summary>
        [Newtonsoft.Json.JsonProperty("personal_link_title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Personal_link_title { get; set; }
    
        /// <summary>Отправлять билеты на бесплатные регистрации</summary>
        [Newtonsoft.Json.JsonProperty("is_sending_free_tickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is_sending_free_tickets { get; set; }
    
        /// <summary>Срок брони билета в часах. Нулевое значение соответствует неограниченному сроку</summary>
        [Newtonsoft.Json.JsonProperty("reservation_period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Reservation_period { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QuestionInclude 
    {
        /// <summary>Уникальный текстовый идентификатор вопроса</summary>
        [Newtonsoft.Json.JsonProperty("field_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field_id { get; set; }
    
        /// <summary>Является ли ответ на вопрос обязательным</summary>
        [Newtonsoft.Json.JsonProperty("is_mandatory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is_mandatory { get; set; }
    
        /// <summary>Статус вопроса</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Текст вопроса</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Подсказка под вопросом</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        /// <summary>Тип вопроса</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>Список ответов на вопрос</summary>
        [Newtonsoft.Json.JsonProperty("possible_answers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Possible_answers { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EditOrderVisitorsAttendance 
    {
        /// <summary>Дата посещения пользователем события</summary>
        [Newtonsoft.Json.JsonProperty("starts_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Starts_at { get; set; }
    
        /// <summary>Дата ухода пользователя с события</summary>
        [Newtonsoft.Json.JsonProperty("ends_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Ends_at { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApproveOrder 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EditEvent 
    {
        /// <summary>Список видов билетов</summary>
        [Newtonsoft.Json.JsonProperty("ticket_types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TicketTypeRequest> Ticket_types { get; set; }
    
        /// <summary>Название события</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Краткое описание/подзаголовок события</summary>
        [Newtonsoft.Json.JsonProperty("description_short", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description_short { get; set; }
    
        /// <summary>Полное описание с html-тегами</summary>
        [Newtonsoft.Json.JsonProperty("description_html", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description_html { get; set; }
    
        /// <summary>Дата начала события в формате ISO</summary>
        [Newtonsoft.Json.JsonProperty("starts_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Starts_at { get; set; }
    
        /// <summary>Дата окончания события в формате ISO</summary>
        [Newtonsoft.Json.JsonProperty("ends_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ends_at { get; set; }
    
        /// <summary>Список категорий, в которые входит событие</summary>
        [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CategoryInclude> Categories { get; set; }
    
        /// <summary>Место проведения события</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationInclude Location { get; set; }
    
        /// <summary>URL картинки события</summary>
        [Newtonsoft.Json.JsonProperty("poster_image_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Poster_image_url { get; set; }
    
        /// <summary>Список настроек события (например, мультианкета)</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Properties { get; set; }
    
        /// <summary>Объект с дополнительными полями, специфичными для данной организации</summary>
        [Newtonsoft.Json.JsonProperty("custom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Custom { get; set; }
    
        /// <summary>Список вопросов в анкете регистрации</summary>
        [Newtonsoft.Json.JsonProperty("questions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QuestionInclude> Questions { get; set; }
    
        /// <summary>Статус доступа к событию</summary>
        [Newtonsoft.Json.JsonProperty("access_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Access_status { get; set; }
    
        /// <summary>Возрастное ограничение события</summary>
        [Newtonsoft.Json.JsonProperty("age_limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Age_limit { get; set; }
    
        /// <summary>Максимальное количество человек, которые могут посетить событие. При достижении этого количества регистрация на событие закроется, даже если будут открытыми категории регистрации. Поставьте 0, чтобы снять ограничение. Учитывается количество как оплаченных, так и забронированных билетов.</summary>
        [Newtonsoft.Json.JsonProperty("tickets_limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Tickets_limit { get; set; }
    
        /// <summary>Список персональных ссылок для билетов</summary>
        [Newtonsoft.Json.JsonProperty("personal_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Personal_links { get; set; }
    
        /// <summary>Заголовок персональной ссылки (Например: Ваша ссылка на онлайн-трансляцию)</summary>
        [Newtonsoft.Json.JsonProperty("personal_link_title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Personal_link_title { get; set; }
    
        /// <summary>Отправлять билеты на бесплатные регистрации</summary>
        [Newtonsoft.Json.JsonProperty("is_sending_free_tickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is_sending_free_tickets { get; set; }
    
        /// <summary>Срок брони билета в часах. Нулевое значение соответствует неограниченному сроку</summary>
        [Newtonsoft.Json.JsonProperty("reservation_period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Reservation_period { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CompanyPaymentRequestResponse 
    {
        /// <summary>Уникальный номер реквизитов компании</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        /// <summary>Уникальный номер реквизитов компании</summary>
        [Newtonsoft.Json.JsonProperty("company_id", Required = Newtonsoft.Json.Required.Always)]
        public int Company_id { get; set; }
    
        /// <summary>ФИО контактнкого лица</summary>
        [Newtonsoft.Json.JsonProperty("contact_person", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contact_person { get; set; }
    
        /// <summary>Телефон контактного лица</summary>
        [Newtonsoft.Json.JsonProperty("contact_phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contact_phone { get; set; }
    
        /// <summary>Email контактного лица</summary>
        [Newtonsoft.Json.JsonProperty("contact_email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contact_email { get; set; }
    
        /// <summary>Имена участников</summary>
        [Newtonsoft.Json.JsonProperty("participants_initial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Participants_initial { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TicketTypeResponse 
    {
        /// <summary>Уникальный номер типа билета</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        /// <summary>Название типа билета</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>Описание типа билета</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Минимальное количество билетов в одной покупке</summary>
        [Newtonsoft.Json.JsonProperty("buy_amount_min", Required = Newtonsoft.Json.Required.Always)]
        public double Buy_amount_min { get; set; }
    
        /// <summary>Максимальное количество билетов в одной покупке</summary>
        [Newtonsoft.Json.JsonProperty("buy_amount_max", Required = Newtonsoft.Json.Required.Always)]
        public double Buy_amount_max { get; set; }
    
        /// <summary>Цена билета</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public double Price { get; set; }
    
        /// <summary>Закрыт ли этот тип билета введённым промокодом</summary>
        [Newtonsoft.Json.JsonProperty("is_promocode_locked", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_promocode_locked { get; set; }
    
        /// <summary>Сколько билетов осталось</summary>
        [Newtonsoft.Json.JsonProperty("remaining", Required = Newtonsoft.Json.Required.Always)]
        public int Remaining { get; set; }
    
        /// <summary>Дата окончания продажи типа билета</summary>
        [Newtonsoft.Json.JsonProperty("sale_ends_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Sale_ends_at { get; set; }
    
        /// <summary>Дата начала продажи типа билета</summary>
        [Newtonsoft.Json.JsonProperty("sale_starts_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Sale_starts_at { get; set; }
    
        /// <summary>Публичный ключ для расшифровки QR-кода билета этого типа</summary>
        [Newtonsoft.Json.JsonProperty("public_key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Public_key { get; set; }
    
        /// <summary>Активность типа билета</summary>
        [Newtonsoft.Json.JsonProperty("is_active", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_active { get; set; }
    
        /// <summary>Партнёрская прибыль</summary>
        [Newtonsoft.Json.JsonProperty("ad_partner_profit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Ad_partner_profit { get; set; }
    
        /// <summary>Отправка персональных сссылок</summary>
        [Newtonsoft.Json.JsonProperty("send_personal_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Send_personal_links { get; set; }
    
        /// <summary>Количество проданных билетов</summary>
        [Newtonsoft.Json.JsonProperty("sold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Sold { get; set; }
    
        /// <summary>Количество посетивших людей</summary>
        [Newtonsoft.Json.JsonProperty("attended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Attended { get; set; }
    
        /// <summary>Ограничение на количество билетов в этом типе билета</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Limit { get; set; }
    
        /// <summary>Статус типа билета</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RegistrationOrdersResponse 
    {
        /// <summary>Количество заказов в событии</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        public int Total { get; set; }
    
        /// <summary>Массив заказов</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RegistrationOrderResponse> Values { get; set; } = new System.Collections.ObjectModel.Collection<RegistrationOrderResponse>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EventResponse 
    {
        /// <summary>Уникальный номер события</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        /// <summary>Дата создания события</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Created_at { get; set; }
    
        /// <summary>Дата начала события</summary>
        [Newtonsoft.Json.JsonProperty("starts_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Starts_at { get; set; }
    
        /// <summary>Дата конца события</summary>
        [Newtonsoft.Json.JsonProperty("ends_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Ends_at { get; set; }
    
        /// <summary>Название события</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
//    
//        /// <summary>Короткое описание события или подзаголовок</summary>
//        [Newtonsoft.Json.JsonProperty("description_short", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Description_short { get; set; }
//    
//        /// <summary>Полное описание события</summary>
//        [Newtonsoft.Json.JsonProperty("description_html", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Description_html { get; set; }
//    
//        /// <summary>Адрес события в timepad</summary>
//        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string Url { get; set; }
//    
//        /// <summary>Картинка события</summary>
//        [Newtonsoft.Json.JsonProperty("poster_image", Required = Newtonsoft.Json.Required.Always)]
//        public ImageResponse Poster_image { get; set; }
//    
//        /// <summary>Процент, который получают партнёры за продажу билета на это событие</summary>
//        [Newtonsoft.Json.JsonProperty("ad_partner_percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int? Ad_partner_percent { get; set; }
//    
//        /// <summary>Язык события по умолчанию</summary>
//        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Locale { get; set; }
//    
//        /// <summary>Место проведения события</summary>
//        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public LocationResponse Location { get; set; }
//    
//        /// <summary>Организация, проводящая событие</summary>
//        [Newtonsoft.Json.JsonProperty("organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public OrganizationResponse Organization { get; set; }
//    
//        /// <summary>Категории события</summary>
//        [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public System.Collections.Generic.ICollection<CategoryResponse> Categories { get; set; } = new System.Collections.ObjectModel.Collection<CategoryResponse>();
//    
//        /// <summary>Максимальное количество человек, которые могут посетить событие</summary>
//        [Newtonsoft.Json.JsonProperty("tickets_limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int? Tickets_limit { get; set; }
//    
//        /// <summary>Доступные типы билетов</summary>
//        [Newtonsoft.Json.JsonProperty("ticket_types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<TicketTypeResponse> Ticket_types { get; set; }
//    
//        /// <summary>Персональные ссылки. Доступно только при указании токена со разрешением view_private_events</summary>
//        [Newtonsoft.Json.JsonProperty("personal_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<string> Personal_links { get; set; }
//    
//        /// <summary>Вопросы, задающиеся при регистрации</summary>
//        [Newtonsoft.Json.JsonProperty("questions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<QuestionResponse> Questions { get; set; }
//    
//        /// <summary>Возрастное ограничение события</summary>
//        [Newtonsoft.Json.JsonProperty("age_limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Age_limit { get; set; }
//    
//        /// <summary>Виджеты, доступные для события</summary>
//        [Newtonsoft.Json.JsonProperty("widgets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<WidgetResponse> Widgets { get; set; }
//    
//        /// <summary>Список особенностей события</summary>
//        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<string> Properties { get; set; }
//    
//        /// <summary>Статус модерации</summary>
//        [Newtonsoft.Json.JsonProperty("moderation_status", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string Moderation_status { get; set; }
//    
//        /// <summary>Статус доступа к событию</summary>
//        [Newtonsoft.Json.JsonProperty("access_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Access_status { get; set; }
//    
//        /// <summary>Обобщённые данные о билетах</summary>
//        [Newtonsoft.Json.JsonProperty("registration_data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public RegistrationDataResponse Registration_data { get; set; }
//    
//        /// <summary>Отправлять билеты на бесплатные регистрации</summary>
//        [Newtonsoft.Json.JsonProperty("is_sending_free_tickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public bool? Is_sending_free_tickets { get; set; }
//    
//        /// <summary>Заголовок персональной ссылки. Доступно только при указании токена со разрешением view_private_events</summary>
//        [Newtonsoft.Json.JsonProperty("personal_link_title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Personal_link_title { get; set; }
//    
//        /// <summary>Срок брони билета в часах. Нулевое значение соответствует неограниченному сроку</summary>
//        [Newtonsoft.Json.JsonProperty("reservation_period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int? Reservation_period { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WebhookApiResponse 
    {
        /// <summary>Идентификатор webhook'а</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>Идентификатор организации</summary>
        [Newtonsoft.Json.JsonProperty("organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Organization { get; set; }
    
        /// <summary>URL-адресс для колбека при событии</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        /// <summary>Статус webhook'а</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Тип webhook'а</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>Ключ подписи webhook'а</summary>
        [Newtonsoft.Json.JsonProperty("secret", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Secret { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentResponse 
    {
        /// <summary>Оплаченная сумма (количество рублей, отданных покупателем платёжной системе в этом заказе)</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }
    
        /// <summary>Дата оплаты</summary>
        [Newtonsoft.Json.JsonProperty("paid_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Paid_at { get; set; }
    
        /// <summary>Платёжная система оплаты</summary>
        [Newtonsoft.Json.JsonProperty("payment_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_type { get; set; }
    
        /// <summary>Ссылка на оплату</summary>
        [Newtonsoft.Json.JsonProperty("payment_link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_link { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CompaniesResponse 
    {
        /// <summary>Количество заказов в событии</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        public int Total { get; set; }
    
        /// <summary>Массив заказов</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CompanyResponse> Values { get; set; } = new System.Collections.ObjectModel.Collection<CompanyResponse>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CategoryResponse 
    {
        /// <summary>Уникальный номер категории</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        /// <summary>Название категории</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InvoicesResponse 
    {
        /// <summary>Количество заказов в событии</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        public int Total { get; set; }
    
        /// <summary>Массив заказов</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<InvoiceResponse> Values { get; set; } = new System.Collections.ObjectModel.Collection<InvoiceResponse>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WidgetResponse 
    {
        /// <summary>Код вставки виджета в сайт</summary>
        [Newtonsoft.Json.JsonProperty("code_html", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code_html { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WidgetContainterInclude 
    {
        /// <summary>Код вставки виджета в сайт</summary>
        [Newtonsoft.Json.JsonProperty("custom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Custom { get; set; }
    
        /// <summary>Код виджета-кнопки для вставки на сайт</summary>
        [Newtonsoft.Json.JsonProperty("button", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Button { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EventStatusIncludeApiResponse 
    {
        /// <summary>Символьный идентификатор статуса</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Название статуса</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EventsResponse 
    {
        /// <summary>Общее количество найденных событий</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        public int Total { get; set; }
    
        /// <summary>Массив с выборкой событий</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<EventResponse> Values { get; set; } = new System.Collections.ObjectModel.Collection<EventResponse>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrganizationResponse 
    {
        /// <summary>Номер организации</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        /// <summary>Название организации</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>Описание организации</summary>
//        [Newtonsoft.Json.JsonProperty("description_html", Required = Newtonsoft.Json.Required.Always)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public string Description_html { get; set; }
    
        /// <summary>URL организации на сайте</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }
    
        /// <summary>Логотип</summary>
//        [Newtonsoft.Json.JsonProperty("logo_image", Required = Newtonsoft.Json.Required.Always)]
//        public ImageResponse Logo_image { get; set; }
    
        /// <summary>URL-идентификатор организации в Таймпаде (***.timepad.ru)</summary>
        [Newtonsoft.Json.JsonProperty("subdomain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subdomain { get; set; }
    
        /// <summary>Настройки доступов для организаций</summary>
//        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<string> Permissions { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EventCategoryIncludeApiResponse 
    {
        /// <summary>Идентификатор категории</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>Название категории</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Name { get; set; }
    
        /// <summary>Тэг</summary>
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tag { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CompanyBankAccountResponse 
    {
        /// <summary>Название банка</summary>
        [Newtonsoft.Json.JsonProperty("bank_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bank_name { get; set; }
    
        /// <summary>Номер расчетного счета</summary>
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Account { get; set; }
    
        /// <summary>БИК</summary>
        [Newtonsoft.Json.JsonProperty("bik", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bik { get; set; }
    
        /// <summary>Номер корреспондентский счет</summary>
        [Newtonsoft.Json.JsonProperty("correspondent_account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Correspondent_account { get; set; }
    
        /// <summary>КПП</summary>
        [Newtonsoft.Json.JsonProperty("kpp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kpp { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderReferrerResponse 
    {
        /// <summary>Кампания</summary>
        [Newtonsoft.Json.JsonProperty("campaign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Campaign { get; set; }
    
        /// <summary>Канал</summary>
        [Newtonsoft.Json.JsonProperty("medium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Medium { get; set; }
    
        /// <summary>Источник</summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EventsCategoriesApiResponse 
    {
        /// <summary>Массив с выборкой категорий событий</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EventCategoryIncludeApiResponse> Values { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TicketsStatusesApiResponse 
    {
        /// <summary>Массив с выборкой статусов билетов</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TicketStatusIncludeApiResponse> Values { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Link 
    {
        /// <summary>Машиночитаемое описание ссылки (для оплат - строковый идентификатор платёжной системы)</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Человекочитаемое описание ссылки (для оплат - название платёжной системы)</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>Ссылка</summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }
    
        /// <summary>Признак того, что ссылка - шаблон. У curies - true, в остальных случаях не присутствует</summary>
        [Newtonsoft.Json.JsonProperty("templated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Templated { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CompanyResponse 
    {
        /// <summary>Уникальный номер реквизитов компании</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        /// <summary>Название компании</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Name { get; set; }
    
        /// <summary>ИНН компании</summary>
        [Newtonsoft.Json.JsonProperty("inn", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Inn { get; set; }
    
        /// <summary>Юридический адрес компании</summary>
        [Newtonsoft.Json.JsonProperty("legal_address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Legal_address { get; set; }
    
        /// <summary>Фактический адрес компании</summary>
        [Newtonsoft.Json.JsonProperty("actual_address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Actual_address { get; set; }
    
        /// <summary>Информация о банке компании</summary>
        [Newtonsoft.Json.JsonProperty("bank_account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompanyBankAccountResponse> Bank_account { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AttendanceResponse 
    {
        /// <summary>Дата посещения события</summary>
        [Newtonsoft.Json.JsonProperty("starts_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Starts_at { get; set; }
    
        /// <summary>Дата ухода с события</summary>
        [Newtonsoft.Json.JsonProperty("ends_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Ends_at { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TicketResponse 
    {
        /// <summary>Уникальный номер билета</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        /// <summary>Номер билета</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>Номинальная цена билета на момент покупки. ВНИМАНИЕ! Эта цена не учитывает начисленные скидки на заказ и является ценой заказанной категории билета на момент его оплаты.</summary>
        [Newtonsoft.Json.JsonProperty("price_nominal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price_nominal { get; set; }
    
        /// <summary>Объект с ответами на вопросы анкеты</summary>
        [Newtonsoft.Json.JsonProperty("answers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Answers { get; set; } = new System.Collections.Generic.Dictionary<string, string>();
    
        /// <summary>Объект информации о типе билета</summary>
        [Newtonsoft.Json.JsonProperty("ticket_type", Required = Newtonsoft.Json.Required.Always)]
        public TicketTypeResponse Ticket_type { get; set; }
    
        /// <summary>Объект информации о посещении пользователя с этим билетом</summary>
        [Newtonsoft.Json.JsonProperty("attendance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttendanceResponse Attendance { get; set; }
    
        /// <summary>Объект информации о месте билета</summary>
        [Newtonsoft.Json.JsonProperty("place", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlaceResponse Place { get; set; }
    
        /// <summary>Объект информации о кодах билета</summary>
        [Newtonsoft.Json.JsonProperty("codes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodesResponse Codes { get; set; }
    
        /// <summary>Персональная ссылка</summary>
        [Newtonsoft.Json.JsonProperty("personal_link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Personal_link { get; set; }
    
        /// <summary>Ссылка на электронный билет</summary>
        [Newtonsoft.Json.JsonProperty("eticket_link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Eticket_link { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderEventResponse 
    {
        /// <summary>Id События</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ImageResponse 
    {
        /// <summary>Картинка стандартного размера</summary>
        [Newtonsoft.Json.JsonProperty("default_url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Default_url { get; set; }
    
        /// <summary>Адрес картинки на uploadcare, к которому можно прибавлять запросы в формате uploadcare</summary>
        [Newtonsoft.Json.JsonProperty("uploadcare_url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uploadcare_url { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CompanyPaymentRequestsResponse 
    {
        /// <summary>Количество заказов в событии</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }
    
        /// <summary>Массив заказов</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompanyPaymentRequestResponse> Values { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AnswerResponse 
    {
        /// <summary>Уникальный номер ответа</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        /// <summary>Текст ответа</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderStatusResponse 
    {
        /// <summary>Идентификатор статуса</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>Человекочитаемый статус заказа</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RegistrationOrderResponse 
    {
        /// <summary>Уникальный номер заказа</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        /// <summary>Дата создания заказа</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Created_at { get; set; }
    
        /// <summary>Статус заказа</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public OrderStatusResponse Status { get; set; }
    
        /// <summary>Адрес электронной почты заказчика билетов. Если режим регистрации на ваше событие находится в положении &amp;laquo;Простая регистрация&amp;raquo; или &amp;laquo;Мультирегистрация&amp;raquo;, здесь будет находиться адрес электронной почты из поля &amp;laquo;E-mail&amp;raquo; формы покупки билетов. Если режим регистрации выставлен как &amp;laquo;Мультианкета&amp;raquo;, то здесь будет находится адрес электронной почты первого участника. В некоторых случаях, когда форма регистрации настроена на отображение отдельной формы заказчика, в этом поле будет находится адрес электронной почты из этой формы.</summary>
        [Newtonsoft.Json.JsonProperty("mail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mail { get; set; }
    
        /// <summary>Объект информации о платеже</summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentResponse Payment { get; set; }
    
        /// <summary>Список регистраций</summary>
        [Newtonsoft.Json.JsonProperty("tickets", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TicketResponse> Tickets { get; set; } = new System.Collections.ObjectModel.Collection<TicketResponse>();
    
        /// <summary>Массив Ответов</summary>
        [Newtonsoft.Json.JsonProperty("answers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Answers { get; set; } = new System.Collections.Generic.Dictionary<string, string>();
    
        /// <summary>Список промокодов</summary>
        [Newtonsoft.Json.JsonProperty("promocodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Promocodes { get; set; }
    
        /// <summary>Краткая информация о событии</summary>
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderEventResponse Event { get; set; }
    
        /// <summary>Источники трафика</summary>
        [Newtonsoft.Json.JsonProperty("referrer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderReferrerResponse Referrer { get; set; }
    
        /// <summary>Подписка на анонсы событий организатора</summary>
        [Newtonsoft.Json.JsonProperty("subscribed_to_newsletter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Subscribed_to_newsletter { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EventsStatusesApiResponse 
    {
        /// <summary>Массив с выборкой статусов событий</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EventStatusIncludeApiResponse> Values { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PlaceResponse 
    {
        /// <summary>Идентификатор места</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Объект описания места</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Description { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WebhooksApiResponse 
    {
        /// <summary>Массив со списком webhook'ов</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WebhookApiResponse> Values { get; set; } = new System.Collections.ObjectModel.Collection<WebhookApiResponse>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CodesResponse 
    {
        /// <summary>ean13 код билета</summary>
        [Newtonsoft.Json.JsonProperty("ean13", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ean13 { get; set; }
    
        /// <summary>ean8 код билета</summary>
        [Newtonsoft.Json.JsonProperty("ean8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ean8 { get; set; }
    
        /// <summary>Код, который будет напечатан на билете</summary>
        [Newtonsoft.Json.JsonProperty("printed_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Printed_code { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RegistrationDataResponse 
    {
        /// <summary>Цена самого дорогого билета</summary>
        [Newtonsoft.Json.JsonProperty("price_max", Required = Newtonsoft.Json.Required.Always)]
        public double Price_max { get; set; }
    
        /// <summary>Цена самого дешёвого билета</summary>
        [Newtonsoft.Json.JsonProperty("price_min", Required = Newtonsoft.Json.Required.Always)]
        public double Price_min { get; set; }
    
        /// <summary>Дата окончания продажи последней категории билета</summary>
        [Newtonsoft.Json.JsonProperty("sale_ends_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Sale_ends_at { get; set; }
    
        /// <summary>Количество забронированных, проданных и бесплатных билетов</summary>
        [Newtonsoft.Json.JsonProperty("tickets_total", Required = Newtonsoft.Json.Required.Always)]
        public int Tickets_total { get; set; }
    
        /// <summary>Максимальное количество доступных билетов, независимо от типа билета</summary>
        [Newtonsoft.Json.JsonProperty("tickets_limit", Required = Newtonsoft.Json.Required.Always)]
        public int Tickets_limit { get; set; }
    
        /// <summary>Открыта ли регистрация</summary>
        [Newtonsoft.Json.JsonProperty("is_registration_open", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_registration_open { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TicketStatusIncludeApiResponse 
    {
        /// <summary>Символьный идентификатор статуса</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Название статуса</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InvoiceResponse 
    {
        /// <summary>Уникальный номер платежа</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        /// <summary>Номер запроса оплаты компанией</summary>
        [Newtonsoft.Json.JsonProperty("company_payment_request_id", Required = Newtonsoft.Json.Required.Always)]
        public int Company_payment_request_id { get; set; }
    
        /// <summary>Номер платёжного документа</summary>
        [Newtonsoft.Json.JsonProperty("invoice_num", Required = Newtonsoft.Json.Required.Always)]
        public int Invoice_num { get; set; }
    
        /// <summary>Количество билетов</summary>
        [Newtonsoft.Json.JsonProperty("tickets_count", Required = Newtonsoft.Json.Required.Always)]
        public int Tickets_count { get; set; }
    
        /// <summary>Сумма платежа</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }
    
        /// <summary>Сумма платежа словами</summary>
        [Newtonsoft.Json.JsonProperty("amount_in_words", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount_in_words { get; set; }
    
        /// <summary>Статус платежа</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Номера заказов</summary>
        [Newtonsoft.Json.JsonProperty("orders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Orders { get; set; }
    
        /// <summary>Дата создания платежа</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }
    
        /// <summary>Дата оплаты платежа</summary>
        [Newtonsoft.Json.JsonProperty("paid_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Paid_at { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QuestionResponse 
    {
        /// <summary>Уникальный текстовый идентификатор вопроса</summary>
        [Newtonsoft.Json.JsonProperty("field_id", Required = Newtonsoft.Json.Required.Always)]
        public int Field_id { get; set; }
    
        /// <summary>Текст вопроса</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>Подсказка под вопросом</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        /// <summary>Тип вопроса</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QuestionResponseType Type { get; set; }
    
        /// <summary>Список предлагаемых ответов (если вопрос предполагает такой список)</summary>
        [Newtonsoft.Json.JsonProperty("possible_answers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AnswerResponse> Possible_answers { get; set; } = new System.Collections.ObjectModel.Collection<AnswerResponse>();
    
        /// <summary>Является ли ответ на вопрос обязательным</summary>
        [Newtonsoft.Json.JsonProperty("is_mandatory", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_mandatory { get; set; }
    
        /// <summary>Выводить вопрос отдельно для каждого купленного билета</summary>
        [Newtonsoft.Json.JsonProperty("is_for_every_visitor", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_for_every_visitor { get; set; }
    
        /// <summary>Дополнительные данные</summary>
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Meta { get; set; } = new object();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LocationResponse 
    {
        /// <summary>Название страны</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; }
    
        /// <summary>Название города</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }
    
        /// <summary>Адрес проведения события</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; }
    
        /// <summary>Широта и долгота для карт</summary>
        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<double> Coordinates { get; set; } = new System.Collections.ObjectModel.Collection<double>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Introspect 
    {
        /// <summary>Действует ли этот токен</summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Always)]
        public bool Active { get; set; }
    
        /// <summary>Идентификатор клиента API, которым получен токен</summary>
        [Newtonsoft.Json.JsonProperty("client_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Client_id { get; set; }
    
        /// <summary>Идентификатор пользователя, которым получен токен</summary>
        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string User_id { get; set; }
    
        /// <summary>Электронная почта пользователя, которым получен токен</summary>
        [Newtonsoft.Json.JsonProperty("user_email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string User_email { get; set; }
    
        /// <summary>Организации, к которым есть доступ у пользователя</summary>
        [Newtonsoft.Json.JsonProperty("organizations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrganizationResponse> Organizations { get; set; } = new System.Collections.ObjectModel.Collection<OrganizationResponse>();
    
//        /// <summary>Заказы, которые пользователь сделал в системе</summary>
//        [Newtonsoft.Json.JsonProperty("orders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<RegistrationOrderResponse> Orders { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CustomMethodApiResponse 
    {
        /// <summary>Статус выполнения операции</summary>
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }
    
        /// <summary>Ответ кастомного метода</summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomMethodApiResponse> Result { get; set; } = new System.Collections.ObjectModel.Collection<CustomMethodApiResponse>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum QuestionResponseType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"text")]
        Text = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"multiline_text")]
        Multiline_text = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"select_one")]
        Select_one = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"select_many")]
        Select_many = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"upload")]
        Upload = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"agree")]
        Agree = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v11.0.0.0)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108